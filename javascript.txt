1.什么是dom
dom针对于文档对象模型的api，是一个具有层次化的节点树，允许开发人员增加、移除、获取、修改，dom节点，文本也是dom的一个节点
2.元素获取方式
dom获取方式
document.getElementById() 获取唯一id
document.getElementByClassName()获取 class名称 返回数组
document.getElementByTagName()获取 属性名称 返回数组
docuemnts.getElementByName()获取属性名称 返回数组

3.自有属性
元素内容属性
obj.innerText 元素文本属性
1.如果元素内部原有的一些字符串，那么这些字符串会被js代码设置的所代替。
2.即便字符串内内容有一些标签元素，这些标签元素会被当做字符串显示在网页上。

obj.innerHTML 元素标签属性
1.如果元素内部有一些字符串或者标签元素，那么这些内容会被js代码设置所代替。
2.如果innerHTML内容都是字符串，那么跟innertext一样的
3.如果innerHTML内容是标签元素，这些标签元素会直接显示在网页上。

元素class属性、src属性、id属性、

4.通用属性获取设置方式
获取属性：obj.getAttriute("") 
设置属性：obj.setAttriute("")
删除属性：obj.removeAttriute("")

5.dom事件有哪些
onclick 单击 ondblclick 双击 onmosueover/onmouseenter 鼠标移入 onmosueout/onmosueleave 鼠标移出
onmouseup 鼠标抬起 onmosuedown 鼠标按下 onmosuemove 鼠标移动 oncontextmenu 右键单击 
6.bom事件有哪些
onload 加载完成 onerror 加载错误 onsroll 监听滚动条 onresize 窗口大小变化

7.数据类型
基本数据类型：null、undefined、string、number、boolean。
引用类型：object、array、function

typeof判断数据类型  

number转化为数字
如果操作数是布尔值，true转化为1，false转化为0
如果是数值简单的传入和传出
如果是null转化为0
如果是undfined转化为nan
如果是字符串 字符串都是数字，去掉双引号。
如果是浮点数，转化为浮点数，
以上不符合转化为nan、

整数类型转化parseInt()。
忽略前面空格，直到第一个是·非空格字符，如果这个是字符串是数字，那么parseinit
会继续解析到第二个字符，直到解析最后一个字符或者遇到一个非数字字符
如果第一个字符不是数字字符或者感叹号，直接返回NaN
如果第一个字符是小数或者以小数开头的字符，parseint只会截图小数部分。

字符串类型转化toString()
1.数字不能直接转字符串，需要把数字存在一个变量中，再转化为字符串
2.数组转字符串，把数组项目一个一个拆分，用逗号隔开，如果是嵌套数组，先拆分里面的。
3.对象转字符串，返回[object,Object]
4.函数转字符串，直接返回函数代码
5.布尔值、null、undefined转字符串，直接加引号

加法操作符
1.如果两个操作数都是数值，那么直接做数字加法运算。
2.如果两个操作数是字符串，那么直接做拼接
3.如果有一个操作数是字符串，那么另一个操作数要转化为字符串做拼接
4.字符串与对象，布尔指，数子、先用tostring转字符串再做拼接
5.数子与布尔值、null、undefined。用number转数字再做加法运算
6.字符串与null、undefined、布尔值相加，直接做拼接。

减性操作符
1.如果两个操作符都是数值，则执行常规的算术减法操作
2.如果有一个操作数是字符串、null、undefined、布尔值，调用number方法
转化为数字再做运算
3.如果是对象，调用tostring（）方法，valueof（）

相等操作符
如果有一个操作数是布尔值，true转化为1false转化为0
如果有一个操作数是字符串，调用number方法
如果有一个操作数是对象，调用tostring方法再调用number方法
如果是null和undefined 不用转化数据类型 他们是相等的
如果是null

函数的创建
1.函数声明
2.函数表达式
3.有名函数
3.匿名函数

函数的执行方式
通过事件触发
函数名+()
函数前面加一个符号 + - ~ 函数立即执行

全局作用域
一个页面就是一个完整的代码执行环境，那么他会存在唯一一个作用域，就是全局作用域，全局作用域的实质就是在全局对象下添加一个属性
在浏览器中全局对象是window，我们申请一个变量就是在window下添加一个属性
函数作用域
函数内部定义的变量只有在函数内部才能访问，函数外部不能访问函数内部的变量，函数内部可以访问函数内部的变量，
函数只有在执行的时候会在内部新建一个临时作用域，当函数执行完后内存会被销毁。

函数传递参数
把函数外部的变量传递给参数，实际上就是把值从一个变量复制到另一个变量。

如果外部传递的数据类型是基本数据类型，函数内部对参数的操作不会改变函数外的变量，因为不是同一个。

如果外部传递的数据类型是引用数据类型，函数内部对参数的操作会改变函数外的变量，因为是同一个。


var  是在当前作用域内定义一个变量
作用域：根据名称去查找变量的一个空间

var变量提升
不论在哪个作用域，用var指令定义的变量，会被提升到当前代码作用域最前。
函数声明会被提前到代码的最前。

let指令定义的变量存在块级作用域，
在控制流程内定义的变量在控制流程外无法访问。

临时死区
因为let没有变量提升
浏览器从上往下执行js代码，
所有用let指令定义的变量之前的
语句都无法访问这个变量。

javascript垃圾回收处理机制
标记清除 当变量进入作用域，标记为进入环境，当变量离开作用域时，标记为离开环境。
垃圾收集器在运行时，把存储在内存中的变量全部都进行标记，除去环境变量和被环境变量引用的变量，剩下的就是环境无法访问的变量，这些变量以及占用的内容空间将被清理回收。

闭包
因为函数内部的变量在函数外部是无法访问的，
如果要访问函数内部的参数或者变量可以用return的方法来实现
在函数中定义一个函数，函数可以通过作用域链相互关联起来，这个函数之间的变量可以互相访问，函数执行完后作用域不会被销毁，变量永远储存在内存中，这种特性称为闭包，
在项目中比较少用到
闭包使函数内部的变量不能被内存释放，这些变量就会占用内存，内存消耗大，可能会导致内存泄露

对象的种类
内置对象：数组、函数、日期、正则表达式
宿主对象：wdinow和document
自定义对象

对象的操作
查询{}.属性名称、{}['属性名称']，
判断
属性名 in {}
{}.hasownpoperty（"属性名称"）

枚举检测
{}.properEleable()

对象的属性 数据属性和访问属性
emumable  属性是否可以 通过for in 进行访问
configable   属性是否可以进行修改或者是否删除属性从而重新定义属性 
value:属性值、
writable 是否可以修改属性值

this的指向问题
在全局函数中，this指向window
函数通过对象进行调用，this指向这个对象
匿名函数的this指向window

数组方法深刻理解
shift 删除第一个数组项
unshift 在第一个数组项添加
pop删除最后一个数组项
push 在最后一个数组项后添加
conect 合并数组
sort 数组项进行排序 改变原来数组
slice 截取数组项 参数是下标 返回新数组
indexof 数组项 查找 第一个参数是查找内容第二个 从第几个开始找
splice（）
every
some
filter
map
reserve（）

dom操作
创建元素 document.createElement
插入元素 父元素.appendChild   父元素.insertBefore(新，指定)
删除 removechild remove（）
替换 replaceChild（新，旧）
克隆 clone()

什么是Bom
bom的核心是window，浏览器窗口对象，它既是作为访问浏览器窗口实例的接口，又是全局对象。
open打开窗口
第一个参数 打开窗口的网址
第二个参数 浏览器窗口打开在哪里 _self 框架元素 _parent框架元素的父元素 _top 框架元素的顶级元素  _blank在新窗口中打开
第三个 定义窗口的样式
是否在导航历史记录中

location 对象
提供当前浏览器窗口加载的文档有关信息，还提供了一些导航功能
hash
host
hostname
href
pathname
port
protocol
search

history 对象 
保存用户上网的历史记录
go
back
forwrod
bom事件

事件冒泡
从具体的节点到根节点触发

事件捕获是从根节点到具体节点顺序触发

三种事件类型
  事件绑定
事件绑定同一对象，只能给同一事件绑定唯一一个处理函数，如果绑定第二个那么，第一个会被清除，就相当于在on上添加属性
函数的this指向触发事件函数的主体对象。
清除事件就是把处理函数改为null

兼容性好，js出来的时候它就有
一个对象一次只能绑定一个事件

事件监听
事件监听有三个参数，第一个参数是事件类型 第二个参数是处理函数，第三个是是否冒泡触发
一次可以绑定多个事件，相互之间互不影响，触发顺序按照绑定顺序
函数的this指向触发函数的主体对象
清除事件监听可以调用removelisten

事件委托
通过监听公共父元素的形式来触发，处理函数通过event.target 确定要触发的对象，。
通常在大量的dom对象需要绑定事件，并且事件的处理函数是同一个时，我们可以使用事件委托。
就比如说给ul li 绑定一个事件 我们一般情况下是用for循环给每个li绑定事件，这样的话只要我们调用函数，就会开辟一个新的作用域，占内存。、

es6语法
解构赋值
按照一定的匹配模式，抽取对象和数组的值，赋值给变量。

数组的解构赋值
赋值等号的左右两边的数组解构要一致，匹配模式
如果等号两边的数值数和变量数的数量不匹配，那么直接跳过缺失部分，左边的跳过了，右边相应的也要跳过。
如果左侧的有一个变量前面有三个小点，意味着右侧对应位置和后面所有的数值会组成一个数组赋值给左侧对应变量，切记左侧的变量只能是最后一个变量才能再前面加三个小点

对象的解构赋值。
根据属性名称进行配对，才能获得值

应用场景
我们可以通过解构赋值 提取到要用到的json数据
变量值的交换
函数有多个返回值用解构赋值接收
函数参数的定义。

模板字符串。
在es5中 在字符串文本中要使用到js的变量，常用字符串拼接的形式来进行操作。
es6反引号 ${}书写非常简便。还可以嵌套使用	

箭头函数 =>{} 
函数内部的this指向定义时所在的对象，而不是在调用时所在的对象
不适用于
定义对象的方法，且方法中使用到了this
需要使用到动态的this
函数不能当做构造函数使用，不能时候new指令 定义函数，直接报错
函数不可以使用arguments对象，该对象在函数内不存在，如果要用，可以用rest参数代替。

字符串方法的拓展
判断参数字符是否存在字符串中返回布尔值
includes() startwith（） endwidth（） 
repeat（）字符串重复
padstart padend 字符串补全
trimstart trimend清除空格
	
数组方法的拓展
拓展运算符，把一个数组拆分，数组项用逗号隔开。
函数传参
复制数组
合并数组
结构赋值，
字符串转数组，
伪数组转真数组
array.from 类似于数组的对象转化为数组
array.of（）把一组值转化为数组
find、findindex 查找并返回符合条件的数组项或数组项索引
遍历数组的索引、 entries、values、keys。
数组项的判断 includes 返回布尔值 
拉平数组 flat flatmap 先做map操作数组项 然后在拉平


对象方法的拓展
对象的创建 object.create()（新建对象的原型对象）
比较两个值是否相等 object.is()
对象的合并，把源对象进行合并，并复制到目标对象 object.assign(目标对象，源对象1,源对象2,)
运用场景 
1.浅拷贝
2.为对象添加属性和方法
3.多个对象的合并
object.entries 名值对的遍历
object.keys 属性名的遍历
object.value 属性值得遍历






































































